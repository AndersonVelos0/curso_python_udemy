# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø
# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo


class Caneta:
    def __init__(self, cor):
        self.cor_tinta = cor 

    # Ele faz um m√©todo se comportar como atributo, n√£o precisa dos parenteses pra chamar o m√©todo
    @property
    def cor(self):
        # Voc√™ pode alterar sem que quebre o c√≥digo cliente, as pessoas utilizam como m√©todo, mas √© um atributo
        print('PROPERTY')
        return self.cor_tinta
    
    @property
    def cor_tampa(self):
        return 'Ol√°, mundo!'
    
# Pra o c√≥digo cliente, ser√° como se estivesse chamando um atributo, n√£o uma fun√ß√£o   
caneta = Caneta('Azul')
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor_tampa)


############################



# class Caneta:
#     def __init__(self, cor):
#         self.cor_tinta = cor 
#     # Criado para proteger o atributo atrav√©s do encapsulamento    
#     def get_cor(self):
#         print('Get cor:')
#         return self.cor_tinta    
        
# caneta = Caneta('Azul')
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())

